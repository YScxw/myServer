#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myserver:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var SkyRTC = require('skyrtc').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

SkyRTC.rtc.on('error', function(error) {
  console.log(new Date()+"发生错误：" + error.message);
});

var https = require('https');
var fs = require('fs');

var options = {
  key: fs.readFileSync('./privatekey.pem'),
  cert: fs.readFileSync('./certificate.pem')
};

https.createServer(options, function (req, res) {
	req.on('data', function (d) {
		process.stdout.write(d);
		res.writeHead(200);
		var data="36353031303030303032333430323030e23c044020a098100000000000000001";
		var buf=new Buffer(data,"hex");
		var buf2=new Buffer('16123456789012345630000010091101240000261101241009151202112371234567890123456=0209458523012005898 12345678CHINA                                   1568901234526000000000000000300000050001000000000000210000002D3590AA');
		var buf3=Buffer.concat([buf,buf2]);
		res.end(buf3);
	});

}).listen(8000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
module.exports = server;
